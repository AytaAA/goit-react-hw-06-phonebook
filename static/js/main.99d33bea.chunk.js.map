{"version":3,"sources":["Components/ContactItem/ContactItem.module.css","Components/Filter/Filter.module.css","Components/Container/Container.module.css","Components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","Components/Filter/Filter.js","Components/Container/Container.js","Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","deleteContact","createAction","resetFilter","contactActions","addContact","name","number","payload","id","uuidv4","connect","state","value","contacts","filter","dispatch","onChange","e","target","className","style","filter_label","type","Container","children","container","ContactForm","props","onInputChange","currentTarget","setState","addNoRepeatContact","some","toLowerCase","alert","onSubmit","reset","onHandleSubmit","preventDefault","form_container","this","form_label","input","pattern","title","required","add_button","Component","defaultProps","items","ContactItem","removeContact","list_item","new_item","delete_btn","onClick","normalizedFilter","contact","includes","getFilteredContacts","contact_list","map","App","initialContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.99d33bea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_item\":\"ContactItem_list_item__yLd32\",\"delete_btn\":\"ContactItem_delete_btn__1KEif\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_label\":\"Filter_filter_label__2SbDa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2hxYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1nM2f\"};","import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst deleteContact = createAction(\"contacts/delete\");\n\nconst resetFilter = createAction(\"contacts/resetFilter\");\n\nconst addContact = createAction(\"contacts/add\", ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst contactActions = { addContact, deleteContact, resetFilter };\nexport default contactActions;\n\n// const addContact = ({ name, number }) => ({\n//     type: actionTypes.ADD,\n//     payload: {\n//         id: uuidv4(),\n//         name,\n//         number,\n//     },\n// })\n\n// const deleteContact = (contactId) => ({\n//     type: actionTypes.DELETE,\n//     payload: contactId,\n// })\n\n// const resetFilter = (value) => ({\n//     type: actionTypes.RESET_FILTER,\n//     payload: value,\n// })\n","import React from \"react\";\nimport style from \"./Filter.module.css\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\n\nconst Filter = ({ value, onChange }) => (\n  <label className={style.filter_label}>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(contactActions.resetFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\nimport style from \"./Container.module.css\";\n\nconst Container = ({ children }) => (\n  <div className={style.container}>{children}</div>\n);\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport style from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\n\nclass ContactForm extends Component {\n  static defaultProps = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    name: this.props.name,\n    number: this.props.number,\n  };\n\n  onInputChange = (e) => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  addNoRepeatContact = (state, contacts) => {\n    const { name, number } = state;\n    if (\n      contacts.some(\n        (contacts) => contacts.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some((contacts) => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    this.props.onSubmit(state);\n    this.reset();\n  };\n\n  onHandleSubmit = (e) => {\n    e.preventDefault();\n    const { contacts } = this.props;\n    this.addNoRepeatContact(this.state, contacts);\n  };\n\n  reset = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n  render() {\n    return (\n      <div className={style.form_container}>\n        <form onSubmit={this.onHandleSubmit}>\n          <h2 className={style.form_label}>Name</h2>\n          <input\n            className={style.input}\n            onChange={this.onInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n          />\n          <h2 className={style.form_label}>Number</h2>\n          <input\n            className={style.input}\n            onChange={this.onInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n          />\n          <br />\n          <button type=\"submit\" className={style.add_button}>\n            {\" \"}\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactActions.addContact({ name, number })),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport style from \"./ContactItem.module.css\";\n\nconst ContactItem = ({ id, name, number, removeContact }) => (\n  <li key={id} className={style.list_item}>\n    <span className={style.new_item}>\n      {name}: {number}\n    </span>\n    <button className={style.delete_btn} onClick={() => removeContact(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nexport default ContactItem;\n","import React from \"react\";\nimport ContactItem from \"../ContactItem\";\nimport style from \"./ContactList.module.css\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\n\nconst ContactList = ({ contacts, removeContact }) => (\n  <ul className={style.contact_list}>\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        id={id}\n        key={id}\n        name={name}\n        number={number}\n        removeContact={removeContact}\n      />\n    ))}\n  </ul>\n);\n\nconst getFilteredContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { items, filter } = state.contacts;\n\n  const filteredContacts = getFilteredContacts(items, filter);\n  return {\n    contacts: filteredContacts,\n  };\n};\n\n// const mapStateToProps = ({ contacts: { contact, filter } }) => ({\n//     contacts: getFilteredContacts(contact, filter),\n// })\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeContact: (id) => dispatch(contactActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from \"react\";\n//data\nimport initialContacts from \"./data/contacts.json\";\n//components\nimport Filter from \"./Components/Filter\";\nimport Container from \"./Components/Container\";\nimport ContactForm from \"./Components/ContactForm\";\nimport ContactList from \"./Components/ContactList\";\n// import { v4 as uuidv4 } from \"uuid\"\n// import { connect } from \"react-redux\"\n// import contactActions from \"./redux/contacts/contacts-actions\"\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    name: \"\",\n    filter: \"\",\n  };\n\n  // componentDidUpdate(prevProps, prevState) {\n  //     const nextContacts = this.state.contacts\n  //     const prevContacts = prevState.contacts\n\n  //     if (nextContacts !== prevContacts) {\n  //         localStorage.setItem(\"contacts\", JSON.stringify(nextContacts))\n  //     }\n  // }\n\n  // componentDidMount() {\n  //     const contacts = localStorage.getItem(\"contacts\")\n  //     const parsedContacts = JSON.parse(contacts)\n\n  //     if (parsedContacts) {\n  //         this.setState({ contacts: parsedContacts })\n  //     }\n  // }\n\n  // addContact = ({ name, number }) => {\n  //     const { contacts } = this.state\n  //     const normalizedName = name.toLocaleLowerCase()\n  //     const contact = {\n  //         id: uuidv4(),\n  //         name,\n  //         number,\n  //     }\n\n  //     contacts.some((contact) => contact.name.toLocaleLowerCase() === normalizedName)\n  //         ? alert(\"Такой контакт существует\")\n  //         : this.setState(({ contacts }) => ({ contacts: [contact, ...contacts] }))\n  // }\n\n  // removeContact = (contactId) => {\n  //     const prevContacts = this.state.contacts\n  //     const removeIndex = prevContacts.map((item) => item.id).indexOf(contactId)\n  //     ~removeIndex && prevContacts.splice(removeIndex, 1)\n\n  //     this.setState({ contacts: prevContacts })\n  // }\n  // changeFilter = (e) => {\n  //     this.setState({ filter: e.currentTarget.value })\n  // }\n\n  render() {\n    // const { contacts, filter } = this.state\n\n    // const normalizedFilter = filter.toLocaleLowerCase()\n\n    // const filteredContacts = contacts.filter((contact) =>\n    //     contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    // )\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        {/* <ContactForm onSubmit={this.addContact} /> */}\n\n        <h1>Contacts</h1>\n        {/* <Filter value={filter} onChange={this.changeFilter} /> */}\n\n        <Filter />\n        {/* <ContactList contacts={filteredContacts} removeContact={this.removeContact} /> */}\n        <ContactList />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport contactActions from \"./contacts-actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport initialContacts from \"../../data/contacts.json\";\n\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\nconst items = createReducer(initialContacts, {\n  [contactActions.addContact]: (state, { payload }) => [...state, payload],\n  [contactActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\nconst filter = createReducer(\"\", {\n  [contactActions.resetFilter]: (_, { payload }) => payload,\n});\n\n// const filter = (state = \"\", { type, payload }) => {\n//     switch (type) {\n//         case \"contacts/resetFilter\":\n//             return payload\n\n//         default:\n//             return state\n//     }\n// }\n// const items = (state = [], { type, payload }) => {\n//     switch (type) {\n//         case actionTypes.ADD:\n//             return [...state, payload]\n\n//         case actionTypes.DELETE:\n//             return state.filter(({ id }) => id !== payload)\n\n//         default:\n//             return state\n//     }\n// }\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import contactReducer from \"./contacts/contacts-reducer\"\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store, persistor } from \"../src/redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\n// store.dispatch(saveContact)\n// store.dispatch(deleteContact)\n// store.dispatch(resetFilter)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_container\":\"ContactForm_form_container__Hm7PC\",\"add_button\":\"ContactForm_add_button__1al-G\",\"input\":\"ContactForm_input__1MPfj\",\"form_label\":\"ContactForm_form_label___f-sx\"};"],"sourceRoot":""}